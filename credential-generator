# ---------------------- [ Minimal System Requirements ----------------------
<#
Operating System	Windows 10 (Build 1607) or later, Windows Server 2016 or later
PowerShell Version	PowerShell 5.1 (Installed by default on Windows 10)
Execution Policy	Must allow running PowerShell scripts (Bypass or RemoteSigned)
User Privileges	Administrator rights required
Required Modules	CredentialManager (Installed automatically if missing)
Disk Space	At least 5 MB for script and logs
#>

# ---------------------- [ Recommended System Requirements----------------------
<#
Operating System	Windows 10 (Build 1909) or later, Windows 11, Windows Server 2019+
PowerShell Version	PowerShell 7.2+ (Recommended for security and performance)
Execution Policy	RemoteSigned (More secure while allowing script execution)
User Privileges	Administrator rights required
Required Modules	CredentialManager (Latest version preferred)
Disk Space	At least 20 MB (To store logs and credentials securely)
#>

# Load required .NET assemblies to enable GUI components (Windows Forms)
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# ---------------------- [ ADMIN PRIVILEGE CHECK ] ----------------------
# This ensures that the script is executed with administrator privileges.
# Without admin rights, storing credentials securely may fail.
$CurrentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
$Principal = New-Object Security.Principal.WindowsPrincipal($CurrentUser)
$IsAdmin = $Principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

if (-not $IsAdmin) {
    [System.Windows.Forms.MessageBox]::Show("This script requires administrator privileges!", "Access Denied", "OK", "Error")
    exit  # Exit script if not run as admin
}

# ---------------------- [ SETUP LOG DIRECTORY ] ----------------------
# Define the directory where error logs will be stored.
$LogDir = "C:\Secure"

# Ensure the directory exists, create it if it does not.
if (-not (Test-Path $LogDir)) {
    New-Item -Path $LogDir -ItemType Directory -Force | Out-Null
}

# ---------------------- [ LOGGING FUNCTION ] ----------------------
# Function to log errors (Prevents passwords from being logged for security).
function Log-Error {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "$Timestamp - $Message" | Out-File -Append -FilePath "$LogDir\CredentialManager_Log.txt"
}

# ---------------------- [ CHECK & INSTALL CredentialManager MODULE ] ----------------------
# The script uses the CredentialManager module to securely store passwords.
function Ensure-CredentialManager {
    try {
        Install-Module -Name CredentialManager -Force -Scope CurrentUser -AllowClobber -ErrorAction Stop
    } catch {
        Log-Error "Failed to install 'CredentialManager' module. Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error installing module: $_", "Error", "OK", "Error")
    }
}

# Check if the module is installed before proceeding.
if (-not (Get-Module -ListAvailable -Name CredentialManager)) { Ensure-CredentialManager }

# ---------------------- [ CREATE GUI FORM ] ----------------------
$form = New-Object System.Windows.Forms.Form
$form.Text = "Store Credentials"
$form.Size = New-Object System.Drawing.Size(350,400)
$form.StartPosition = "CenterScreen"

# ---------------------- [ GUI COMPONENTS ] ----------------------

# Application Name Label & Input Field
$lblAppName = New-Object System.Windows.Forms.Label
$lblAppName.Text = "App Name:"; $lblAppName.Location = "20,20"
$txtAppName = New-Object System.Windows.Forms.TextBox
$txtAppName.Location = "120,20"

# Username Label & Input Field
$lblUser = New-Object System.Windows.Forms.Label
$lblUser.Text = "Username:"; $lblUser.Location = "20,60"
$txtUser = New-Object System.Windows.Forms.TextBox
$txtUser.Location = "120,60"

# Password Label & Secure Input Field
$lblPass = New-Object System.Windows.Forms.Label
$lblPass.Text = "Password:"; $lblPass.Location = "20,100"
$txtPass = New-Object System.Windows.Forms.TextBox
$txtPass.UseSystemPasswordChar = $true  # Mask input for security
$txtPass.Location = "120,100"

# ---------------------- [ SAVE BUTTON ] ----------------------
# Stores credentials securely and warns before overwriting existing ones.
$btnSave = New-Object System.Windows.Forms.Button
$btnSave.Text = "Save"
$btnSave.Location = "40,150"
$btnSave.Size = New-Object System.Drawing.Size(100,30)
$btnSave.Add_Click({
    try {
        # Ensure all required fields are filled.
        $target = $txtAppName.Text.Trim()
        if ($target -eq "" -or $txtUser.Text -eq "" -or $txtPass.Text -eq "") {
            [System.Windows.Forms.MessageBox]::Show("All fields are required!", "Error", "OK", "Error")
            return
        }

        # Check if credentials already exist
        $ExistingCredential = Get-StoredCredential -Target $target
        if ($ExistingCredential) {
            $choice = [System.Windows.Forms.MessageBox]::Show("Credentials for '$target' already exist. Overwrite?", "Confirm Overwrite", "YesNo", "Warning")
            if ($choice -ne "Yes") { return }
        }

        # Securely store credentials using SecureString
        $SecurePassword = ConvertTo-SecureString $txtPass.Text -AsPlainText -Force
        New-StoredCredential -Target $target -UserName $txtUser.Text -Password $SecurePassword -Persist LocalMachine

        [System.Windows.Forms.MessageBox]::Show("Credentials securely stored for '$target'!", "Success", "OK", "Information")
        $form.Close()
    } catch {
        Log-Error "Error while saving credentials. Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error: $_", "Error", "OK", "Error")
    }
})
$form.Controls.Add($btnSave)

# ---------------------- [ OPEN CREDENTIAL MANAGER BUTTON ] ----------------------
# Opens Windows Credential Manager for managing stored credentials.
$btnOpenCredMgr = New-Object System.Windows.Forms.Button
$btnOpenCredMgr.Text = "Open Credential Manager"
$btnOpenCredMgr.Location = "40,200"
$btnOpenCredMgr.Size = New-Object System.Drawing.Size(240,30)
$btnOpenCredMgr.Add_Click({
    try {
        Start-Process "control.exe" -ArgumentList "/name Microsoft.CredentialManager" -ErrorAction Stop
    } catch {
        Log-Error "Error while opening Credential Manager. Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error: $_", "Error", "OK", "Error")
    }
})
$form.Controls.Add($btnOpenCredMgr)

# ---------------------- [ VIEW ERROR LOGS BUTTON ] ----------------------
# Opens the directory where logs are stored.
$btnViewLog = New-Object System.Windows.Forms.Button
$btnViewLog.Text = "View Error Logs Folder"
$btnViewLog.Location = "40,250"
$btnViewLog.Size = New-Object System.Drawing.Size(240,30)
$btnViewLog.Add_Click({
    try {
        Start-Process explorer.exe -ArgumentList $LogDir -ErrorAction Stop
    } catch {
        Log-Error "Error while opening error logs folder. Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error: $_", "Error", "OK", "Error")
    }
})
$form.Controls.Add($btnViewLog)

# ---------------------- [ OPEN TASK SCHEDULER BUTTON ] ----------------------
# Opens Windows Task Scheduler.
$btnOpenTaskSched = New-Object System.Windows.Forms.Button
$btnOpenTaskSched.Text = "Open Task Scheduler"
$btnOpenTaskSched.Location = "40,300"
$btnOpenTaskSched.Size = New-Object System.Drawing.Size(240,30)
$btnOpenTaskSched.Add_Click({
    try {
        Start-Process "taskschd.msc" -ErrorAction Stop
    } catch {
        Log-Error "Error while opening Task Scheduler. Error: $_"
        [System.Windows.Forms.MessageBox]::Show("Error: $_", "Error", "OK", "Error")
    }
})
$form.Controls.Add($btnOpenTaskSched)

# ---------------------- [ CANCEL BUTTON ] ----------------------
$btnCancel = New-Object System.Windows.Forms.Button
$btnCancel.Text = "Cancel"
$btnCancel.Location = "180,150"
$btnCancel.Size = New-Object System.Drawing.Size(100,30)
$btnCancel.Add_Click({ $form.Close() })
$form.Controls.Add($btnCancel)

# Add UI components to form
$form.Controls.AddRange(@($lblAppName, $txtAppName, $lblUser, $txtUser, $lblPass, $txtPass))

# ---------------------- [ SHOW GUI ] ----------------------
$form.ShowDialog()
